// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectTracking_WebAPI.Data;

#nullable disable

namespace ProjectTracking_WebAPI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220719211344_AddedRefreshJWTToken")]
    partial class AddedRefreshJWTToken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProjectTracking_WebAPI.Data.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Refresh_Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmoloyeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmoloyeeID"), 1L, 1);

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillSets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmoloyeeID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectID"), 1L, 1);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.ProjectTask", b =>
                {
                    b.Property<int>("ProjectTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectTaskID"), 1L, 1);

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("TaskCompletion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaskEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TaskStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserStoryID")
                        .HasColumnType("int");

                    b.HasKey("ProjectTaskID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("UserStoryID");

                    b.ToTable("ProjectTask");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.UserStory", b =>
                {
                    b.Property<int>("UserStoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserStoryID"), 1L, 1);

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserStoryID");

                    b.HasIndex("ProjectID");

                    b.ToTable("UserStory");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.ProjectTask", b =>
                {
                    b.HasOne("ProjectTracking_WebAPI.Models.Employee", "Employee")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectTracking_WebAPI.Models.UserStory", "UserStory")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("UserStoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.UserStory", b =>
                {
                    b.HasOne("ProjectTracking_WebAPI.Models.Project", "Project")
                        .WithMany("UserStories")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.Employee", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.Project", b =>
                {
                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("ProjectTracking_WebAPI.Models.UserStory", b =>
                {
                    b.Navigation("ProjectTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
